#!/bin/bash
# Script to generate random password with the length you want
# Copyright (C) 2014 Catalin Costin Stanciu - All Rights Reserved
# Permission to copy and modify is granted under the APACHE 2.0 license
# Last revised 19/07/2014

<<LICENSE
Copyright 2014 Catalin Stanciu
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
LICENSE


#######################################
##        CONFIGURATION              ##
#######################################

backup_dir='/home/backups/asterisk'     # Directory where will be saved the backup
backup_dir2=''                          # Second directory to copy the backup
data_dir='/etc/asterisk'                # Directory to be backuped 
name='asterisk'                         # Name of application we are making the backup
date=$(date +"%d-%m-%Y_%H%M%S")         # We use the date to append to the name to be 
                                        # sure when was made the backup
backup_name="$name-backup-$date.tar.gz" # Entire name of the  backup

########################################
########################################

########################################
##          Helper functions
########################################

function log() {
 echo "[$(date +"%d-%m-%Y %H:%M:%S")] $1" 
}

## Function to check if a directory exists and
## create it if not

function check_dir() {
    if [ ! -d $1 ]; then
        mkdir -p $1 2>1 >/dev/null 
        if [ $? -eq 0 ]; then
           log "WARNING - Directory created $1 because not existent" 
	   return 0	
        else
           log "WARNING - Directory was not created $1 because command failed"
	   return 1
	fi
    fi
}


## Function to create a backup using tar.gz compressed
## files

function backup() {
    tar czf $1 $2 2>1 > /dev/null
    if [ $? -eq 0 ]; then
	log "Backup from $2 to $1 done"
	return 0
    else
        log "Backup from $2 to $1 failed"
	return 1
    fi
}


##
## Main program function
##

function main() {
   log "Creating backup $backup_dir/$backup_name ..."
   check_dir $backup_dir	
   backup $backup_dir/$backup_name $data_dir
   first_backup=$?
   if [ "$backup_dir2" != "" ]; then
       log "Creating backup $backup_dir2/$backup_name ..."
       check_dir $backup_dir2
       if [ $first_backup -eq 0 ] && [ -f $backup_dir/$backup_name ]; then
            cp $backup_dir/$backup_name $backup_dir2/$backup_name
            log "Backup2 copied because already created"
       else
            backup $backup_dir2/$backup_name $data_dir
            log "Backup2 entirely created"
       fi
   fi
}


# calling main function to start program
main
